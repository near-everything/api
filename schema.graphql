type App implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  id: Int!
  metadata: JSON

  """Reads and enables pagination through a set of `Thing`."""
  thingsByOriginAppId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Thing`."""
    orderBy: [ThingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ThingCondition
  ): ThingsConnection!
}

"""
A condition to be used against `App` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AppCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON
}

"""An input for mutations affecting `App`"""
input AppInput {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  metadata: JSON
}

"""Represents an update to a `App`. Fields that are set will be updated."""
input AppPatch {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  metadata: JSON
}

"""A connection to a list of `App` values."""
type AppsConnection {
  """A list of `App` objects."""
  nodes: [App!]!

  """
  A list of edges which contains the `App` and cursor to aid in pagination.
  """
  edges: [AppsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `App` you could get from the connection."""
  totalCount: Int!
}

"""A `App` edge in the connection."""
type AppsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `App` at the end of the edge."""
  node: App!
}

"""Methods to use when ordering `App`."""
enum AppsOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  METADATA_ASC
  METADATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Attribute implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  id: Int!
  name: String!
  isApproved: Boolean

  """Reads and enables pagination through a set of `Relationship`."""
  relationships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Relationship`."""
    orderBy: [RelationshipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipCondition
  ): RelationshipsConnection!

  """Reads and enables pagination through a set of `Characteristic`."""
  characteristics(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Characteristic`."""
    orderBy: [CharacteristicsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CharacteristicCondition
  ): CharacteristicsConnection!
}

"""
A condition to be used against `Attribute` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttributeCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `isApproved` field."""
  isApproved: Boolean
}

"""
Represents an update to a `Attribute`. Fields that are set will be updated.
"""
input AttributePatch {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  name: String
  isApproved: Boolean
}

"""A connection to a list of `Attribute` values."""
type AttributesConnection {
  """A list of `Attribute` objects."""
  nodes: [Attribute!]!

  """
  A list of edges which contains the `Attribute` and cursor to aid in pagination.
  """
  edges: [AttributesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Attribute` you could get from the connection."""
  totalCount: Int!
}

"""A `Attribute` edge in the connection."""
type AttributesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Attribute` at the end of the edge."""
  node: Attribute!
}

"""Methods to use when ordering `Attribute`."""
enum AttributesOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  IS_APPROVED_ASC
  IS_APPROVED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Characteristic implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  thingId: Int!
  attributeId: Int!
  optionId: Int!

  """Reads a single `Thing` that is related to this `Characteristic`."""
  thing: Thing

  """Reads a single `Attribute` that is related to this `Characteristic`."""
  attribute: Attribute

  """Reads a single `Option` that is related to this `Characteristic`."""
  option: Option
}

"""
A condition to be used against `Characteristic` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CharacteristicCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `thingId` field."""
  thingId: Int

  """Checks for equality with the object’s `attributeId` field."""
  attributeId: Int

  """Checks for equality with the object’s `optionId` field."""
  optionId: Int
}

"""An input for mutations affecting `Characteristic`"""
input CharacteristicInput {
  createdAt: Datetime
  updatedAt: Datetime
  thingId: Int!
  attributeId: Int!
  optionId: Int!
}

"""
Represents an update to a `Characteristic`. Fields that are set will be updated.
"""
input CharacteristicPatch {
  createdAt: Datetime
  updatedAt: Datetime
  thingId: Int
  attributeId: Int
  optionId: Int
}

"""A connection to a list of `Characteristic` values."""
type CharacteristicsConnection {
  """A list of `Characteristic` objects."""
  nodes: [Characteristic!]!

  """
  A list of edges which contains the `Characteristic` and cursor to aid in pagination.
  """
  edges: [CharacteristicsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Characteristic` you could get from the connection."""
  totalCount: Int!
}

"""A `Characteristic` edge in the connection."""
type CharacteristicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Characteristic` at the end of the edge."""
  node: Characteristic!
}

"""Methods to use when ordering `Characteristic`."""
enum CharacteristicsOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  THING_ID_ASC
  THING_ID_DESC
  ATTRIBUTE_ID_ASC
  ATTRIBUTE_ID_DESC
  OPTION_ID_ASC
  OPTION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Comment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  id: Int!
  commenterId: String!
  postId: Int!
  metadata: JSON

  """Reads a single `User` that is related to this `Comment`."""
  commenter: User

  """Reads a single `Post` that is related to this `Comment`."""
  post: Post
}

"""
A condition to be used against `Comment` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CommentCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `commenterId` field."""
  commenterId: String

  """Checks for equality with the object’s `postId` field."""
  postId: Int

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON
}

"""An input for mutations affecting `Comment`"""
input CommentInput {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  commenterId: String!
  postId: Int!
  metadata: JSON
}

"""A connection to a list of `Comment` values."""
type CommentsConnection {
  """A list of `Comment` objects."""
  nodes: [Comment!]!

  """
  A list of edges which contains the `Comment` and cursor to aid in pagination.
  """
  edges: [CommentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection."""
type CommentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Comment` at the end of the edge."""
  node: Comment!
}

"""Methods to use when ordering `Comment`."""
enum CommentsOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  COMMENTER_ID_ASC
  COMMENTER_ID_DESC
  POST_ID_ASC
  POST_ID_DESC
  METADATA_ASC
  METADATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `App` mutation."""
input CreateAppInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `App` to be created by this mutation."""
  app: AppInput!
}

"""The output of our create `App` mutation."""
type CreateAppPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `App` that was created by this mutation."""
  app: App

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `App`. May be used by Relay 1."""
  appEdge(
    """The method to use when ordering `App`."""
    orderBy: [AppsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AppsEdge
}

input CreateAttributeInput {
  name: String!
  options: [CreateOptionInput!]!
}

type CreateAttributePayload {
  attribute: Attribute
  query: Query
}

"""All input for the create `Characteristic` mutation."""
input CreateCharacteristicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Characteristic` to be created by this mutation."""
  characteristic: CharacteristicInput!
}

"""The output of our create `Characteristic` mutation."""
type CreateCharacteristicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Characteristic` that was created by this mutation."""
  characteristic: Characteristic

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Characteristic`."""
  thing: Thing

  """Reads a single `Attribute` that is related to this `Characteristic`."""
  attribute: Attribute

  """Reads a single `Option` that is related to this `Characteristic`."""
  option: Option

  """An edge for our `Characteristic`. May be used by Relay 1."""
  characteristicEdge(
    """The method to use when ordering `Characteristic`."""
    orderBy: [CharacteristicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CharacteristicsEdge
}

"""All input for the create `Comment` mutation."""
input CreateCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Comment` to be created by this mutation."""
  comment: CommentInput!
}

"""The output of our create `Comment` mutation."""
type CreateCommentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Comment` that was created by this mutation."""
  comment: Comment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Comment`."""
  commenter: User

  """Reads a single `Post` that is related to this `Comment`."""
  post: Post

  """An edge for our `Comment`. May be used by Relay 1."""
  commentEdge(
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentsEdge
}

"""All input for the create `Location` mutation."""
input CreateLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Location` to be created by this mutation."""
  location: LocationInput!
}

"""The output of our create `Location` mutation."""
type CreateLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Location` that was created by this mutation."""
  location: Location

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationsEdge
}

"""All input for the create `Media` mutation."""
input CreateMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Media` to be created by this mutation."""
  media: MediaInput!
}

"""The output of our create `Media` mutation."""
type CreateMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Media` that was created by this mutation."""
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Media`."""
  thing: Thing

  """Reads a single `Request` that is related to this `Media`."""
  request: Request

  """Reads a single `Post` that is related to this `Media`."""
  post: Post

  """An edge for our `Media`. May be used by Relay 1."""
  mediaEdge(
    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaEdge
}

"""All input for the create `Option` mutation."""
input CreateOptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Option` to be created by this mutation."""
  option: OptionInput!
}

"""The output of our create `Option` mutation."""
type CreateOptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Option` that was created by this mutation."""
  option: Option

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Option`. May be used by Relay 1."""
  optionEdge(
    """The method to use when ordering `Option`."""
    orderBy: [OptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OptionsEdge
}

"""All input for the create `Post` mutation."""
input CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Post` to be created by this mutation."""
  post: PostInput!
}

"""The output of our create `Post` mutation."""
type CreatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was created by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  poster: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the create `Relationship` mutation."""
input CreateRelationshipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Relationship` to be created by this mutation."""
  relationship: RelationshipInput!
}

"""The output of our create `Relationship` mutation."""
type CreateRelationshipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Relationship` that was created by this mutation."""
  relationship: Relationship

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Attribute` that is related to this `Relationship`."""
  attribute: Attribute

  """Reads a single `Option` that is related to this `Relationship`."""
  option: Option

  """An edge for our `Relationship`. May be used by Relay 1."""
  relationshipEdge(
    """The method to use when ordering `Relationship`."""
    orderBy: [RelationshipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationshipsEdge
}

"""All input for the create `Request` mutation."""
input CreateRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Request` to be created by this mutation."""
  request: RequestInput!
}

"""The output of our create `Request` mutation."""
type CreateRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Request` that was created by this mutation."""
  request: Request

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Request`."""
  requester: User

  """An edge for our `Request`. May be used by Relay 1."""
  requestEdge(
    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RequestsEdge
}

input CreateThingInput {
  attributes: [NewAttributeInput!]!
  ownerId: String!
  geomPoint: GeoJSON
  privacyType: PrivacyType!
}

type CreateThingPayload {
  thing: Thing
  query: Query
}

"""All input for the create `ThingTag` mutation."""
input CreateThingTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ThingTag` to be created by this mutation."""
  thingTag: ThingTagInput!
}

"""The output of our create `ThingTag` mutation."""
type CreateThingTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ThingTag` that was created by this mutation."""
  thingTag: ThingTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `ThingTag`."""
  thing: Thing

  """Reads a single `Media` that is related to this `ThingTag`."""
  media: Media

  """An edge for our `ThingTag`. May be used by Relay 1."""
  thingTagEdge(
    """The method to use when ordering `ThingTag`."""
    orderBy: [ThingTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ThingTagsEdge
}

input CreateUserInput {
  uid: String!
}

type CreateUserPayload {
  user: User
  query: Query
}

"""All input for the create `UserTag` mutation."""
input CreateUserTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserTag` to be created by this mutation."""
  userTag: UserTagInput!
}

"""The output of our create `UserTag` mutation."""
type CreateUserTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserTag` that was created by this mutation."""
  userTag: UserTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserTag`."""
  user: User

  """Reads a single `Media` that is related to this `UserTag`."""
  media: Media

  """An edge for our `UserTag`. May be used by Relay 1."""
  userTagEdge(
    """The method to use when ordering `UserTag`."""
    orderBy: [UserTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserTagsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteAppByNodeId` mutation."""
input DeleteAppByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `App` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteApp` mutation."""
input DeleteAppInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `App` mutation."""
type DeleteAppPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `App` that was deleted by this mutation."""
  app: App
  deletedAppNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `App`. May be used by Relay 1."""
  appEdge(
    """The method to use when ordering `App`."""
    orderBy: [AppsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AppsEdge
}

"""All input for the `deleteAttributeByName` mutation."""
input DeleteAttributeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteAttributeByNodeId` mutation."""
input DeleteAttributeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attribute` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAttribute` mutation."""
input DeleteAttributeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Attribute` mutation."""
type DeleteAttributePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attribute` that was deleted by this mutation."""
  attribute: Attribute
  deletedAttributeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Attribute`. May be used by Relay 1."""
  attributeEdge(
    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttributesEdge
}

"""All input for the `deleteCharacteristicByNodeId` mutation."""
input DeleteCharacteristicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Characteristic` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCharacteristic` mutation."""
input DeleteCharacteristicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  thingId: Int!
  attributeId: Int!
  optionId: Int!
}

"""The output of our delete `Characteristic` mutation."""
type DeleteCharacteristicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Characteristic` that was deleted by this mutation."""
  characteristic: Characteristic
  deletedCharacteristicNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Characteristic`."""
  thing: Thing

  """Reads a single `Attribute` that is related to this `Characteristic`."""
  attribute: Attribute

  """Reads a single `Option` that is related to this `Characteristic`."""
  option: Option

  """An edge for our `Characteristic`. May be used by Relay 1."""
  characteristicEdge(
    """The method to use when ordering `Characteristic`."""
    orderBy: [CharacteristicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CharacteristicsEdge
}

"""All input for the `deleteCommentByNodeId` mutation."""
input DeleteCommentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Comment` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteComment` mutation."""
input DeleteCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Comment` mutation."""
type DeleteCommentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Comment` that was deleted by this mutation."""
  comment: Comment
  deletedCommentNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Comment`."""
  commenter: User

  """Reads a single `Post` that is related to this `Comment`."""
  post: Post

  """An edge for our `Comment`. May be used by Relay 1."""
  commentEdge(
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentsEdge
}

"""All input for the `deleteLocationByNodeId` mutation."""
input DeleteLocationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Location` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLocation` mutation."""
input DeleteLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Location` mutation."""
type DeleteLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Location` that was deleted by this mutation."""
  location: Location
  deletedLocationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationsEdge
}

"""All input for the `deleteMediaByNodeId` mutation."""
input DeleteMediaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Media` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMedia` mutation."""
input DeleteMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Media` mutation."""
type DeleteMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Media` that was deleted by this mutation."""
  media: Media
  deletedMediaNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Media`."""
  thing: Thing

  """Reads a single `Request` that is related to this `Media`."""
  request: Request

  """Reads a single `Post` that is related to this `Media`."""
  post: Post

  """An edge for our `Media`. May be used by Relay 1."""
  mediaEdge(
    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaEdge
}

"""All input for the `deleteOptionByNodeId` mutation."""
input DeleteOptionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Option` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOption` mutation."""
input DeleteOptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Option` mutation."""
type DeleteOptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Option` that was deleted by this mutation."""
  option: Option
  deletedOptionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Option`. May be used by Relay 1."""
  optionEdge(
    """The method to use when ordering `Option`."""
    orderBy: [OptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OptionsEdge
}

"""All input for the `deletePostByNodeId` mutation."""
input DeletePostByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePost` mutation."""
input DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Post` mutation."""
type DeletePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was deleted by this mutation."""
  post: Post
  deletedPostNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  poster: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `deleteRelationshipByNodeId` mutation."""
input DeleteRelationshipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Relationship` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRelationship` mutation."""
input DeleteRelationshipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  attributeId: Int!
  optionId: Int!
}

"""The output of our delete `Relationship` mutation."""
type DeleteRelationshipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Relationship` that was deleted by this mutation."""
  relationship: Relationship
  deletedRelationshipNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Attribute` that is related to this `Relationship`."""
  attribute: Attribute

  """Reads a single `Option` that is related to this `Relationship`."""
  option: Option

  """An edge for our `Relationship`. May be used by Relay 1."""
  relationshipEdge(
    """The method to use when ordering `Relationship`."""
    orderBy: [RelationshipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationshipsEdge
}

"""All input for the `deleteRequestByNodeId` mutation."""
input DeleteRequestByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Request` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRequest` mutation."""
input DeleteRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Request` mutation."""
type DeleteRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Request` that was deleted by this mutation."""
  request: Request
  deletedRequestNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Request`."""
  requester: User

  """An edge for our `Request`. May be used by Relay 1."""
  requestEdge(
    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RequestsEdge
}

"""All input for the `deleteThingByNodeId` mutation."""
input DeleteThingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Thing` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteThing` mutation."""
input DeleteThingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Thing` mutation."""
type DeleteThingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Thing` that was deleted by this mutation."""
  thing: Thing
  deletedThingNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Thing`."""
  owner: User

  """Reads a single `App` that is related to this `Thing`."""
  originApp: App

  """Reads a single `Location` that is related to this `Thing`."""
  location: Location

  """An edge for our `Thing`. May be used by Relay 1."""
  thingEdge(
    """The method to use when ordering `Thing`."""
    orderBy: [ThingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ThingsEdge
}

"""All input for the `deleteThingTagByNodeId` mutation."""
input DeleteThingTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ThingTag` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteThingTag` mutation."""
input DeleteThingTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  thingId: Int!
  mediaId: Int!
}

"""The output of our delete `ThingTag` mutation."""
type DeleteThingTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ThingTag` that was deleted by this mutation."""
  thingTag: ThingTag
  deletedThingTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `ThingTag`."""
  thing: Thing

  """Reads a single `Media` that is related to this `ThingTag`."""
  media: Media

  """An edge for our `ThingTag`. May be used by Relay 1."""
  thingTagEdge(
    """The method to use when ordering `ThingTag`."""
    orderBy: [ThingTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ThingTagsEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""All input for the `deleteUserByWallet` mutation."""
input DeleteUserByWalletInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  wallet: String!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUserTagByNodeId` mutation."""
input DeleteUserTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserTag` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserTag` mutation."""
input DeleteUserTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: String!
  mediaId: Int!
}

"""The output of our delete `UserTag` mutation."""
type DeleteUserTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserTag` that was deleted by this mutation."""
  userTag: UserTag
  deletedUserTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserTag`."""
  user: User

  """Reads a single `Media` that is related to this `UserTag`."""
  media: Media

  """An edge for our `UserTag`. May be used by Relay 1."""
  userTagEdge(
    """The method to use when ordering `UserTag`."""
    orderBy: [UserTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserTagsEdge
}

"""
The `GeoJSON` scalar type represents GeoJSON values as specified by[RFC 7946](https://tools.ietf.org/html/rfc7946).
"""
scalar GeoJSON

"""All geometry XY types implement this interface"""
interface GeometryGeometry {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

"""All geometry types implement this interface"""
interface GeometryInterface {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

type GeometryPoint implements GeometryInterface & GeometryGeometry {
  geojson: GeoJSON
  srid: Int!
  x: Float!
  y: Float!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Location implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  id: Int!
  geomPoint: GeometryPoint!
  metadata: JSON

  """Reads and enables pagination through a set of `Thing`."""
  things(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Thing`."""
    orderBy: [ThingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ThingCondition
  ): ThingsConnection!
}

"""
A condition to be used against `Location` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LocationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `geomPoint` field."""
  geomPoint: GeoJSON

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON
}

"""An input for mutations affecting `Location`"""
input LocationInput {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  geomPoint: GeoJSON!
  metadata: JSON
}

"""
Represents an update to a `Location`. Fields that are set will be updated.
"""
input LocationPatch {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  geomPoint: GeoJSON
  metadata: JSON
}

"""A connection to a list of `Location` values."""
type LocationsConnection {
  """A list of `Location` objects."""
  nodes: [Location!]!

  """
  A list of edges which contains the `Location` and cursor to aid in pagination.
  """
  edges: [LocationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Location` you could get from the connection."""
  totalCount: Int!
}

"""A `Location` edge in the connection."""
type LocationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Location` at the end of the edge."""
  node: Location!
}

"""Methods to use when ordering `Location`."""
enum LocationsOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  GEOM_POINT_ASC
  GEOM_POINT_DESC
  METADATA_ASC
  METADATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Media implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  id: Int!
  thingId: Int
  requestId: Int
  postId: Int
  mediaUrl: String!
  metadata: JSON

  """Reads a single `Thing` that is related to this `Media`."""
  thing: Thing

  """Reads a single `Request` that is related to this `Media`."""
  request: Request

  """Reads a single `Post` that is related to this `Media`."""
  post: Post

  """Reads and enables pagination through a set of `ThingTag`."""
  thingTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ThingTag`."""
    orderBy: [ThingTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ThingTagCondition
  ): ThingTagsConnection!

  """Reads and enables pagination through a set of `UserTag`."""
  userTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserTag`."""
    orderBy: [UserTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserTagCondition
  ): UserTagsConnection!
}

"""
A condition to be used against `Media` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MediaCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `thingId` field."""
  thingId: Int

  """Checks for equality with the object’s `requestId` field."""
  requestId: Int

  """Checks for equality with the object’s `postId` field."""
  postId: Int

  """Checks for equality with the object’s `mediaUrl` field."""
  mediaUrl: String

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON
}

"""A connection to a list of `Media` values."""
type MediaConnection {
  """A list of `Media` objects."""
  nodes: [Media!]!

  """
  A list of edges which contains the `Media` and cursor to aid in pagination.
  """
  edges: [MediaEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Media` you could get from the connection."""
  totalCount: Int!
}

"""A `Media` edge in the connection."""
type MediaEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Media` at the end of the edge."""
  node: Media!
}

"""An input for mutations affecting `Media`"""
input MediaInput {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  thingId: Int
  requestId: Int
  postId: Int
  mediaUrl: String!
  metadata: JSON
}

"""Methods to use when ordering `Media`."""
enum MediaOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  THING_ID_ASC
  THING_ID_DESC
  REQUEST_ID_ASC
  REQUEST_ID_DESC
  POST_ID_ASC
  POST_ID_DESC
  MEDIA_URL_ASC
  MEDIA_URL_DESC
  METADATA_ASC
  METADATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Media`. Fields that are set will be updated.
"""
input MediaPatch {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  thingId: Int
  requestId: Int
  postId: Int
  mediaUrl: String
  metadata: JSON
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `App`."""
  createApp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAppInput!
  ): CreateAppPayload

  """Creates a single `Characteristic`."""
  createCharacteristic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCharacteristicInput!
  ): CreateCharacteristicPayload

  """Creates a single `Comment`."""
  createComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCommentInput!
  ): CreateCommentPayload

  """Creates a single `Location`."""
  createLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLocationInput!
  ): CreateLocationPayload

  """Creates a single `Media`."""
  createMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMediaInput!
  ): CreateMediaPayload

  """Creates a single `Option`."""
  createOption(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOptionInput!
  ): CreateOptionPayload

  """Creates a single `Post`."""
  createPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """Creates a single `Relationship`."""
  createRelationship(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRelationshipInput!
  ): CreateRelationshipPayload

  """Creates a single `Request`."""
  createRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRequestInput!
  ): CreateRequestPayload

  """Creates a single `ThingTag`."""
  createThingTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateThingTagInput!
  ): CreateThingTagPayload

  """Creates a single `UserTag`."""
  createUserTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserTagInput!
  ): CreateUserTagPayload

  """Updates a single `App` using its globally unique id and a patch."""
  updateAppByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAppByNodeIdInput!
  ): UpdateAppPayload

  """Updates a single `App` using a unique key and a patch."""
  updateApp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAppInput!
  ): UpdateAppPayload

  """Updates a single `Attribute` using its globally unique id and a patch."""
  updateAttributeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttributeByNodeIdInput!
  ): UpdateAttributePayload

  """Updates a single `Attribute` using a unique key and a patch."""
  updateAttribute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttributeInput!
  ): UpdateAttributePayload

  """Updates a single `Attribute` using a unique key and a patch."""
  updateAttributeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttributeByNameInput!
  ): UpdateAttributePayload

  """
  Updates a single `Characteristic` using its globally unique id and a patch.
  """
  updateCharacteristicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCharacteristicByNodeIdInput!
  ): UpdateCharacteristicPayload

  """Updates a single `Characteristic` using a unique key and a patch."""
  updateCharacteristic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCharacteristicInput!
  ): UpdateCharacteristicPayload

  """Updates a single `Location` using its globally unique id and a patch."""
  updateLocationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLocationByNodeIdInput!
  ): UpdateLocationPayload

  """Updates a single `Location` using a unique key and a patch."""
  updateLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLocationInput!
  ): UpdateLocationPayload

  """Updates a single `Media` using its globally unique id and a patch."""
  updateMediaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaByNodeIdInput!
  ): UpdateMediaPayload

  """Updates a single `Media` using a unique key and a patch."""
  updateMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaInput!
  ): UpdateMediaPayload

  """Updates a single `Option` using its globally unique id and a patch."""
  updateOptionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOptionByNodeIdInput!
  ): UpdateOptionPayload

  """Updates a single `Option` using a unique key and a patch."""
  updateOption(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOptionInput!
  ): UpdateOptionPayload

  """Updates a single `Post` using its globally unique id and a patch."""
  updatePostByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostByNodeIdInput!
  ): UpdatePostPayload

  """Updates a single `Post` using a unique key and a patch."""
  updatePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostInput!
  ): UpdatePostPayload

  """Updates a single `ThingTag` using its globally unique id and a patch."""
  updateThingTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateThingTagByNodeIdInput!
  ): UpdateThingTagPayload

  """Updates a single `ThingTag` using a unique key and a patch."""
  updateThingTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateThingTagInput!
  ): UpdateThingTagPayload

  """Updates a single `UserTag` using its globally unique id and a patch."""
  updateUserTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserTagByNodeIdInput!
  ): UpdateUserTagPayload

  """Updates a single `UserTag` using a unique key and a patch."""
  updateUserTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserTagInput!
  ): UpdateUserTagPayload

  """Deletes a single `App` using its globally unique id."""
  deleteAppByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAppByNodeIdInput!
  ): DeleteAppPayload

  """Deletes a single `App` using a unique key."""
  deleteApp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAppInput!
  ): DeleteAppPayload

  """Deletes a single `Attribute` using its globally unique id."""
  deleteAttributeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttributeByNodeIdInput!
  ): DeleteAttributePayload

  """Deletes a single `Attribute` using a unique key."""
  deleteAttribute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttributeInput!
  ): DeleteAttributePayload

  """Deletes a single `Attribute` using a unique key."""
  deleteAttributeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttributeByNameInput!
  ): DeleteAttributePayload

  """Deletes a single `Characteristic` using its globally unique id."""
  deleteCharacteristicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCharacteristicByNodeIdInput!
  ): DeleteCharacteristicPayload

  """Deletes a single `Characteristic` using a unique key."""
  deleteCharacteristic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCharacteristicInput!
  ): DeleteCharacteristicPayload

  """Deletes a single `Comment` using its globally unique id."""
  deleteCommentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommentByNodeIdInput!
  ): DeleteCommentPayload

  """Deletes a single `Comment` using a unique key."""
  deleteComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommentInput!
  ): DeleteCommentPayload

  """Deletes a single `Location` using its globally unique id."""
  deleteLocationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLocationByNodeIdInput!
  ): DeleteLocationPayload

  """Deletes a single `Location` using a unique key."""
  deleteLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLocationInput!
  ): DeleteLocationPayload

  """Deletes a single `Media` using its globally unique id."""
  deleteMediaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaByNodeIdInput!
  ): DeleteMediaPayload

  """Deletes a single `Media` using a unique key."""
  deleteMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaInput!
  ): DeleteMediaPayload

  """Deletes a single `Option` using its globally unique id."""
  deleteOptionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOptionByNodeIdInput!
  ): DeleteOptionPayload

  """Deletes a single `Option` using a unique key."""
  deleteOption(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOptionInput!
  ): DeleteOptionPayload

  """Deletes a single `Post` using its globally unique id."""
  deletePostByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostByNodeIdInput!
  ): DeletePostPayload

  """Deletes a single `Post` using a unique key."""
  deletePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostInput!
  ): DeletePostPayload

  """Deletes a single `Relationship` using its globally unique id."""
  deleteRelationshipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelationshipByNodeIdInput!
  ): DeleteRelationshipPayload

  """Deletes a single `Relationship` using a unique key."""
  deleteRelationship(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelationshipInput!
  ): DeleteRelationshipPayload

  """Deletes a single `Request` using its globally unique id."""
  deleteRequestByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRequestByNodeIdInput!
  ): DeleteRequestPayload

  """Deletes a single `Request` using a unique key."""
  deleteRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRequestInput!
  ): DeleteRequestPayload

  """Deletes a single `Thing` using its globally unique id."""
  deleteThingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteThingByNodeIdInput!
  ): DeleteThingPayload

  """Deletes a single `Thing` using a unique key."""
  deleteThing(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteThingInput!
  ): DeleteThingPayload

  """Deletes a single `ThingTag` using its globally unique id."""
  deleteThingTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteThingTagByNodeIdInput!
  ): DeleteThingTagPayload

  """Deletes a single `ThingTag` using a unique key."""
  deleteThingTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteThingTagInput!
  ): DeleteThingTagPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByWallet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByWalletInput!
  ): DeleteUserPayload

  """Deletes a single `UserTag` using its globally unique id."""
  deleteUserTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserTagByNodeIdInput!
  ): DeleteUserTagPayload

  """Deletes a single `UserTag` using a unique key."""
  deleteUserTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserTagInput!
  ): DeleteUserTagPayload
  createThing(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateThingInput!
  ): CreateThingPayload
  createAttribute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttributeInput!
  ): CreateAttributePayload
  proposeAttribute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ProposeAttributeInput!
  ): ProposeAttributePayload
  proposeOption(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ProposeOptionInput!
  ): ProposeOptionPayload
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload
}

input NewAttributeInput {
  attributeId: Int!
  optionId: Int!
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Option implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  id: Int!
  value: String!
  isApproved: Boolean

  """Reads and enables pagination through a set of `Relationship`."""
  relationships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Relationship`."""
    orderBy: [RelationshipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipCondition
  ): RelationshipsConnection!

  """Reads and enables pagination through a set of `Characteristic`."""
  characteristics(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Characteristic`."""
    orderBy: [CharacteristicsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CharacteristicCondition
  ): CharacteristicsConnection!
}

"""
A condition to be used against `Option` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input OptionCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `value` field."""
  value: String

  """Checks for equality with the object’s `isApproved` field."""
  isApproved: Boolean
}

"""An input for mutations affecting `Option`"""
input OptionInput {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  value: String!
  isApproved: Boolean
}

"""
Represents an update to a `Option`. Fields that are set will be updated.
"""
input OptionPatch {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  value: String
  isApproved: Boolean
}

"""A connection to a list of `Option` values."""
type OptionsConnection {
  """A list of `Option` objects."""
  nodes: [Option!]!

  """
  A list of edges which contains the `Option` and cursor to aid in pagination.
  """
  edges: [OptionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Option` you could get from the connection."""
  totalCount: Int!
}

"""A `Option` edge in the connection."""
type OptionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Option` at the end of the edge."""
  node: Option!
}

"""Methods to use when ordering `Option`."""
enum OptionsOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  VALUE_ASC
  VALUE_DESC
  IS_APPROVED_ASC
  IS_APPROVED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Post implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  id: Int!
  posterId: String!
  metadata: JSON
  privacyType: PrivacyType!

  """Reads a single `User` that is related to this `Post`."""
  poster: User

  """Reads and enables pagination through a set of `Comment`."""
  comments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentCondition
  ): CommentsConnection!

  """Reads and enables pagination through a set of `Media`."""
  medias(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition
  ): MediaConnection!
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `posterId` field."""
  posterId: String

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON

  """Checks for equality with the object’s `privacyType` field."""
  privacyType: PrivacyType
}

"""An input for mutations affecting `Post`"""
input PostInput {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  posterId: String!
  metadata: JSON
  privacyType: PrivacyType!
}

"""Represents an update to a `Post`. Fields that are set will be updated."""
input PostPatch {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  posterId: String
  metadata: JSON
  privacyType: PrivacyType
}

"""A connection to a list of `Post` values."""
type PostsConnection {
  """A list of `Post` objects."""
  nodes: [Post!]!

  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post!
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  POSTER_ID_ASC
  POSTER_ID_DESC
  METADATA_ASC
  METADATA_DESC
  PRIVACY_TYPE_ASC
  PRIVACY_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum PrivacyType {
  PRIVATE
  PUBLIC
}

input ProposeAttributeInput {
  name: String!
}

type ProposeAttributePayload {
  attribute: Attribute
  query: Query
}

input ProposeOptionInput {
  value: String!
  attributeId: Int!
}

type ProposeOptionPayload {
  option: Option
  query: Query
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `App`."""
  apps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `App`."""
    orderBy: [AppsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AppCondition
  ): AppsConnection

  """Reads and enables pagination through a set of `Attribute`."""
  attributes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition
  ): AttributesConnection

  """Reads and enables pagination through a set of `Characteristic`."""
  characteristics(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Characteristic`."""
    orderBy: [CharacteristicsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CharacteristicCondition
  ): CharacteristicsConnection

  """Reads and enables pagination through a set of `Comment`."""
  comments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentCondition
  ): CommentsConnection

  """Reads and enables pagination through a set of `Location`."""
  locations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LocationCondition
  ): LocationsConnection

  """Reads and enables pagination through a set of `Media`."""
  medias(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition
  ): MediaConnection

  """Reads and enables pagination through a set of `Option`."""
  options(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Option`."""
    orderBy: [OptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OptionCondition
  ): OptionsConnection

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection

  """Reads and enables pagination through a set of `Relationship`."""
  relationships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Relationship`."""
    orderBy: [RelationshipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipCondition
  ): RelationshipsConnection

  """Reads and enables pagination through a set of `Request`."""
  requests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RequestCondition
  ): RequestsConnection

  """Reads and enables pagination through a set of `Thing`."""
  things(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Thing`."""
    orderBy: [ThingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ThingCondition
  ): ThingsConnection

  """Reads and enables pagination through a set of `ThingTag`."""
  thingTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ThingTag`."""
    orderBy: [ThingTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ThingTagCondition
  ): ThingTagsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection

  """Reads and enables pagination through a set of `UserTag`."""
  userTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserTag`."""
    orderBy: [UserTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserTagCondition
  ): UserTagsConnection
  app(id: Int!): App
  attribute(id: Int!): Attribute
  attributeByName(name: String!): Attribute
  characteristic(thingId: Int!, attributeId: Int!, optionId: Int!): Characteristic
  comment(id: Int!): Comment
  location(id: Int!): Location
  media(id: Int!): Media
  option(id: Int!): Option
  post(id: Int!): Post
  relationship(attributeId: Int!, optionId: Int!): Relationship
  request(id: Int!): Request
  thing(id: Int!): Thing
  thingTag(thingId: Int!, mediaId: Int!): ThingTag
  user(id: String!): User
  userByUsername(username: String!): User
  userByWallet(wallet: String!): User
  userTag(userId: String!, mediaId: Int!): UserTag

  """Reads a single `App` using its globally unique `ID`."""
  appByNodeId(
    """The globally unique `ID` to be used in selecting a single `App`."""
    nodeId: ID!
  ): App

  """Reads a single `Attribute` using its globally unique `ID`."""
  attributeByNodeId(
    """The globally unique `ID` to be used in selecting a single `Attribute`."""
    nodeId: ID!
  ): Attribute

  """Reads a single `Characteristic` using its globally unique `ID`."""
  characteristicByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Characteristic`.
    """
    nodeId: ID!
  ): Characteristic

  """Reads a single `Comment` using its globally unique `ID`."""
  commentByNodeId(
    """The globally unique `ID` to be used in selecting a single `Comment`."""
    nodeId: ID!
  ): Comment

  """Reads a single `Location` using its globally unique `ID`."""
  locationByNodeId(
    """The globally unique `ID` to be used in selecting a single `Location`."""
    nodeId: ID!
  ): Location

  """Reads a single `Media` using its globally unique `ID`."""
  mediaByNodeId(
    """The globally unique `ID` to be used in selecting a single `Media`."""
    nodeId: ID!
  ): Media

  """Reads a single `Option` using its globally unique `ID`."""
  optionByNodeId(
    """The globally unique `ID` to be used in selecting a single `Option`."""
    nodeId: ID!
  ): Option

  """Reads a single `Post` using its globally unique `ID`."""
  postByNodeId(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    nodeId: ID!
  ): Post

  """Reads a single `Relationship` using its globally unique `ID`."""
  relationshipByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Relationship`.
    """
    nodeId: ID!
  ): Relationship

  """Reads a single `Request` using its globally unique `ID`."""
  requestByNodeId(
    """The globally unique `ID` to be used in selecting a single `Request`."""
    nodeId: ID!
  ): Request

  """Reads a single `Thing` using its globally unique `ID`."""
  thingByNodeId(
    """The globally unique `ID` to be used in selecting a single `Thing`."""
    nodeId: ID!
  ): Thing

  """Reads a single `ThingTag` using its globally unique `ID`."""
  thingTagByNodeId(
    """The globally unique `ID` to be used in selecting a single `ThingTag`."""
    nodeId: ID!
  ): ThingTag

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `UserTag` using its globally unique `ID`."""
  userTagByNodeId(
    """The globally unique `ID` to be used in selecting a single `UserTag`."""
    nodeId: ID!
  ): UserTag
}

type Relationship implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  attributeId: Int!
  optionId: Int!

  """Reads a single `Attribute` that is related to this `Relationship`."""
  attribute: Attribute

  """Reads a single `Option` that is related to this `Relationship`."""
  option: Option
}

"""
A condition to be used against `Relationship` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RelationshipCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `attributeId` field."""
  attributeId: Int

  """Checks for equality with the object’s `optionId` field."""
  optionId: Int
}

"""An input for mutations affecting `Relationship`"""
input RelationshipInput {
  createdAt: Datetime
  updatedAt: Datetime
  attributeId: Int!
  optionId: Int!
}

"""A connection to a list of `Relationship` values."""
type RelationshipsConnection {
  """A list of `Relationship` objects."""
  nodes: [Relationship!]!

  """
  A list of edges which contains the `Relationship` and cursor to aid in pagination.
  """
  edges: [RelationshipsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Relationship` you could get from the connection."""
  totalCount: Int!
}

"""A `Relationship` edge in the connection."""
type RelationshipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Relationship` at the end of the edge."""
  node: Relationship!
}

"""Methods to use when ordering `Relationship`."""
enum RelationshipsOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ATTRIBUTE_ID_ASC
  ATTRIBUTE_ID_DESC
  OPTION_ID_ASC
  OPTION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Request implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  id: Int!
  requesterId: String!
  metadata: JSON

  """Reads a single `User` that is related to this `Request`."""
  requester: User

  """Reads and enables pagination through a set of `Media`."""
  medias(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition
  ): MediaConnection!
}

"""
A condition to be used against `Request` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RequestCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `requesterId` field."""
  requesterId: String

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON
}

"""An input for mutations affecting `Request`"""
input RequestInput {
  createdAt: Datetime
  updatedAt: Datetime
  id: Int
  requesterId: String!
  metadata: JSON
}

"""A connection to a list of `Request` values."""
type RequestsConnection {
  """A list of `Request` objects."""
  nodes: [Request!]!

  """
  A list of edges which contains the `Request` and cursor to aid in pagination.
  """
  edges: [RequestsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Request` you could get from the connection."""
  totalCount: Int!
}

"""A `Request` edge in the connection."""
type RequestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Request` at the end of the edge."""
  node: Request!
}

"""Methods to use when ordering `Request`."""
enum RequestsOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  REQUESTER_ID_ASC
  REQUESTER_ID_DESC
  METADATA_ASC
  METADATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Thing implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  id: Int!
  ownerId: String!
  originAppId: Int!
  locationId: Int
  metadata: JSON
  privacyType: PrivacyType!
  nftId: String

  """Reads a single `User` that is related to this `Thing`."""
  owner: User

  """Reads a single `App` that is related to this `Thing`."""
  originApp: App

  """Reads a single `Location` that is related to this `Thing`."""
  location: Location

  """Reads and enables pagination through a set of `Media`."""
  medias(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition
  ): MediaConnection!

  """Reads and enables pagination through a set of `ThingTag`."""
  thingTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ThingTag`."""
    orderBy: [ThingTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ThingTagCondition
  ): ThingTagsConnection!

  """Reads and enables pagination through a set of `Characteristic`."""
  characteristics(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Characteristic`."""
    orderBy: [CharacteristicsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CharacteristicCondition
  ): CharacteristicsConnection!
}

"""
A condition to be used against `Thing` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ThingCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: String

  """Checks for equality with the object’s `originAppId` field."""
  originAppId: Int

  """Checks for equality with the object’s `locationId` field."""
  locationId: Int

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON

  """Checks for equality with the object’s `privacyType` field."""
  privacyType: PrivacyType

  """Checks for equality with the object’s `nftId` field."""
  nftId: String
}

"""A connection to a list of `Thing` values."""
type ThingsConnection {
  """A list of `Thing` objects."""
  nodes: [Thing!]!

  """
  A list of edges which contains the `Thing` and cursor to aid in pagination.
  """
  edges: [ThingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Thing` you could get from the connection."""
  totalCount: Int!
}

"""A `Thing` edge in the connection."""
type ThingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Thing` at the end of the edge."""
  node: Thing!
}

"""Methods to use when ordering `Thing`."""
enum ThingsOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  ORIGIN_APP_ID_ASC
  ORIGIN_APP_ID_DESC
  LOCATION_ID_ASC
  LOCATION_ID_DESC
  METADATA_ASC
  METADATA_DESC
  PRIVACY_TYPE_ASC
  PRIVACY_TYPE_DESC
  NFT_ID_ASC
  NFT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ThingTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  thingId: Int!
  mediaId: Int!

  """Reads a single `Thing` that is related to this `ThingTag`."""
  thing: Thing

  """Reads a single `Media` that is related to this `ThingTag`."""
  media: Media
}

"""
A condition to be used against `ThingTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ThingTagCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `thingId` field."""
  thingId: Int

  """Checks for equality with the object’s `mediaId` field."""
  mediaId: Int
}

"""An input for mutations affecting `ThingTag`"""
input ThingTagInput {
  createdAt: Datetime
  updatedAt: Datetime
  thingId: Int!
  mediaId: Int!
}

"""
Represents an update to a `ThingTag`. Fields that are set will be updated.
"""
input ThingTagPatch {
  createdAt: Datetime
  updatedAt: Datetime
  thingId: Int
  mediaId: Int
}

"""A connection to a list of `ThingTag` values."""
type ThingTagsConnection {
  """A list of `ThingTag` objects."""
  nodes: [ThingTag!]!

  """
  A list of edges which contains the `ThingTag` and cursor to aid in pagination.
  """
  edges: [ThingTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ThingTag` you could get from the connection."""
  totalCount: Int!
}

"""A `ThingTag` edge in the connection."""
type ThingTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ThingTag` at the end of the edge."""
  node: ThingTag!
}

"""Methods to use when ordering `ThingTag`."""
enum ThingTagsOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  THING_ID_ASC
  THING_ID_DESC
  MEDIA_ID_ASC
  MEDIA_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateAppByNodeId` mutation."""
input UpdateAppByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `App` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `App` being updated.
  """
  patch: AppPatch!
}

"""All input for the `updateApp` mutation."""
input UpdateAppInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `App` being updated.
  """
  patch: AppPatch!
  id: Int!
}

"""The output of our update `App` mutation."""
type UpdateAppPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `App` that was updated by this mutation."""
  app: App

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `App`. May be used by Relay 1."""
  appEdge(
    """The method to use when ordering `App`."""
    orderBy: [AppsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AppsEdge
}

"""All input for the `updateAttributeByName` mutation."""
input UpdateAttributeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Attribute` being updated.
  """
  patch: AttributePatch!
  name: String!
}

"""All input for the `updateAttributeByNodeId` mutation."""
input UpdateAttributeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attribute` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Attribute` being updated.
  """
  patch: AttributePatch!
}

"""All input for the `updateAttribute` mutation."""
input UpdateAttributeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Attribute` being updated.
  """
  patch: AttributePatch!
  id: Int!
}

"""The output of our update `Attribute` mutation."""
type UpdateAttributePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attribute` that was updated by this mutation."""
  attribute: Attribute

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Attribute`. May be used by Relay 1."""
  attributeEdge(
    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttributesEdge
}

"""All input for the `updateCharacteristicByNodeId` mutation."""
input UpdateCharacteristicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Characteristic` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Characteristic` being updated.
  """
  patch: CharacteristicPatch!
}

"""All input for the `updateCharacteristic` mutation."""
input UpdateCharacteristicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Characteristic` being updated.
  """
  patch: CharacteristicPatch!
  thingId: Int!
  attributeId: Int!
  optionId: Int!
}

"""The output of our update `Characteristic` mutation."""
type UpdateCharacteristicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Characteristic` that was updated by this mutation."""
  characteristic: Characteristic

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Characteristic`."""
  thing: Thing

  """Reads a single `Attribute` that is related to this `Characteristic`."""
  attribute: Attribute

  """Reads a single `Option` that is related to this `Characteristic`."""
  option: Option

  """An edge for our `Characteristic`. May be used by Relay 1."""
  characteristicEdge(
    """The method to use when ordering `Characteristic`."""
    orderBy: [CharacteristicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CharacteristicsEdge
}

"""All input for the `updateLocationByNodeId` mutation."""
input UpdateLocationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Location` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Location` being updated.
  """
  patch: LocationPatch!
}

"""All input for the `updateLocation` mutation."""
input UpdateLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Location` being updated.
  """
  patch: LocationPatch!
  id: Int!
}

"""The output of our update `Location` mutation."""
type UpdateLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Location` that was updated by this mutation."""
  location: Location

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationsEdge
}

"""All input for the `updateMediaByNodeId` mutation."""
input UpdateMediaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Media` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Media` being updated.
  """
  patch: MediaPatch!
}

"""All input for the `updateMedia` mutation."""
input UpdateMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Media` being updated.
  """
  patch: MediaPatch!
  id: Int!
}

"""The output of our update `Media` mutation."""
type UpdateMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Media` that was updated by this mutation."""
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Media`."""
  thing: Thing

  """Reads a single `Request` that is related to this `Media`."""
  request: Request

  """Reads a single `Post` that is related to this `Media`."""
  post: Post

  """An edge for our `Media`. May be used by Relay 1."""
  mediaEdge(
    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaEdge
}

"""All input for the `updateOptionByNodeId` mutation."""
input UpdateOptionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Option` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Option` being updated.
  """
  patch: OptionPatch!
}

"""All input for the `updateOption` mutation."""
input UpdateOptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Option` being updated.
  """
  patch: OptionPatch!
  id: Int!
}

"""The output of our update `Option` mutation."""
type UpdateOptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Option` that was updated by this mutation."""
  option: Option

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Option`. May be used by Relay 1."""
  optionEdge(
    """The method to use when ordering `Option`."""
    orderBy: [OptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OptionsEdge
}

"""All input for the `updatePostByNodeId` mutation."""
input UpdatePostByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  patch: PostPatch!
}

"""All input for the `updatePost` mutation."""
input UpdatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  patch: PostPatch!
  id: Int!
}

"""The output of our update `Post` mutation."""
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was updated by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  poster: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `updateThingTagByNodeId` mutation."""
input UpdateThingTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ThingTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ThingTag` being updated.
  """
  patch: ThingTagPatch!
}

"""All input for the `updateThingTag` mutation."""
input UpdateThingTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ThingTag` being updated.
  """
  patch: ThingTagPatch!
  thingId: Int!
  mediaId: Int!
}

"""The output of our update `ThingTag` mutation."""
type UpdateThingTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ThingTag` that was updated by this mutation."""
  thingTag: ThingTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `ThingTag`."""
  thing: Thing

  """Reads a single `Media` that is related to this `ThingTag`."""
  media: Media

  """An edge for our `ThingTag`. May be used by Relay 1."""
  thingTagEdge(
    """The method to use when ordering `ThingTag`."""
    orderBy: [ThingTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ThingTagsEdge
}

"""All input for the `updateUserTagByNodeId` mutation."""
input UpdateUserTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserTag` being updated.
  """
  patch: UserTagPatch!
}

"""All input for the `updateUserTag` mutation."""
input UpdateUserTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserTag` being updated.
  """
  patch: UserTagPatch!
  userId: String!
  mediaId: Int!
}

"""The output of our update `UserTag` mutation."""
type UpdateUserTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserTag` that was updated by this mutation."""
  userTag: UserTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserTag`."""
  user: User

  """Reads a single `Media` that is related to this `UserTag`."""
  media: Media

  """An edge for our `UserTag`. May be used by Relay 1."""
  userTagEdge(
    """The method to use when ordering `UserTag`."""
    orderBy: [UserTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserTagsEdge
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  id: String!
  username: String
  name: String
  favoriteColor: String
  wallet: String
  metadata: JSON

  """Reads and enables pagination through a set of `Thing`."""
  thingsByOwnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Thing`."""
    orderBy: [ThingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ThingCondition
  ): ThingsConnection!

  """Reads and enables pagination through a set of `Request`."""
  requestsByRequesterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RequestCondition
  ): RequestsConnection!

  """Reads and enables pagination through a set of `Post`."""
  postsByPosterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection!

  """Reads and enables pagination through a set of `Comment`."""
  commentsByCommenterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentCondition
  ): CommentsConnection!

  """Reads and enables pagination through a set of `UserTag`."""
  userTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserTag`."""
    orderBy: [UserTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserTagCondition
  ): UserTagsConnection!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `favoriteColor` field."""
  favoriteColor: String

  """Checks for equality with the object’s `wallet` field."""
  wallet: String

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User!]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  NAME_ASC
  NAME_DESC
  FAVORITE_COLOR_ASC
  FAVORITE_COLOR_DESC
  WALLET_ASC
  WALLET_DESC
  METADATA_ASC
  METADATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type UserTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  createdAt: Datetime!
  updatedAt: Datetime!
  userId: String!
  mediaId: Int!

  """Reads a single `User` that is related to this `UserTag`."""
  user: User

  """Reads a single `Media` that is related to this `UserTag`."""
  media: Media
}

"""
A condition to be used against `UserTag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserTagCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: String

  """Checks for equality with the object’s `mediaId` field."""
  mediaId: Int
}

"""An input for mutations affecting `UserTag`"""
input UserTagInput {
  createdAt: Datetime
  updatedAt: Datetime
  userId: String!
  mediaId: Int!
}

"""
Represents an update to a `UserTag`. Fields that are set will be updated.
"""
input UserTagPatch {
  createdAt: Datetime
  updatedAt: Datetime
  userId: String
  mediaId: Int
}

"""A connection to a list of `UserTag` values."""
type UserTagsConnection {
  """A list of `UserTag` objects."""
  nodes: [UserTag!]!

  """
  A list of edges which contains the `UserTag` and cursor to aid in pagination.
  """
  edges: [UserTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserTag` you could get from the connection."""
  totalCount: Int!
}

"""A `UserTag` edge in the connection."""
type UserTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserTag` at the end of the edge."""
  node: UserTag!
}

"""Methods to use when ordering `UserTag`."""
enum UserTagsOrderBy {
  NATURAL
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
  MEDIA_ID_ASC
  MEDIA_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
